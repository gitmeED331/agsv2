rm /run/user/1000/astal.sock

ellipsize={Pango.EllipsizeMode.END}

transitionType={Gtk.RevealerTransitionType.SLIDE_RIGHT}

valign={Gtk.Align.CENTER}
halign={Gtk.Align.CENTER}

import { execAsync, App, Astal, bind, Gtk, GObject, Gdk } from "astal"
import Hyprland from "gi://AstalHyprland"
import Battery from "gi://AstalBattery"
import Bluetooth from "gi://AstalBluetooth"
import Mpris from "gi://AstalMpris"
import Notifd from "gi://AstalNotifd"
import PowerProfiles from "gi://AstalPowerProfiles"
import Tray from "gi://AstalTray"

/* window parameters */

      layer={Astal.Layer.OVERLAY}
      exclusivity={Astal.Exclusivity.NORMAL}
      keymode={Astal.Keymode.NONE}
      visible={false}
      application={App}

/* end window parameters */

onClick={(_, event) => {
                if (event.button === Gdk.BUTTON_PRIMARY) {
                    dispatch(id);
                } else if (event.button === Gdk.BUTTON_SECONDARY) {
                    moveSilently(id);
                } else if (event.button === Gdk.BUTTON_MIDDLE) {
                    openOverview(id);
                }
            }}

const win = App.get_window("overview");
    if (win) { win.visible = !win.visible; }

function ClientWidget(client: Hyprland.Client) {
    return <box>
        <label label={bind(client, "title")} />
        <icon icon={bind(client, "class").as(someFnToCheckIfItsValidIcon)} />
    </box>
}

function Taskbar() {
    return <box>
        {bind(hyprland, "clients").as(cs => cs.map(ClientWidget))}
    </box>
}

visible = { bind(hyprland, "focusedClient").as(Boolean) }

import workspaceEvents from './workspaceEvents';

function onWorkspaceChange() {
    workspaceEvents.emit('workspace_changed');
}

// Example: Trigger the event manually
onWorkspaceChange()

// --- signal handler ---
function ws(id: number) {
    const hyprland = Hyprland.get_default();
    const get = () => hyprland.get_workspace(id) || Hyprland.Workspace.dummy(id, null);

    return Variable(get())
        .observe(hyprland, "workspace-added", get)
        .observe(hyprland, "workspace-removed", get);
}
// --- end signal handler ---

const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))

const repeatedGreetings = async () => {
  await sleep(1000)
  console.log("First")
  await sleep(1000)
  console.log("Second")
  await sleep(1000)
  console.log("Third")
}

repeatedGreetings()

{RoundedAngleEnd("bottomright", { className: "angleLarge" })}
{RoundedAngleEnd("bottomleft", { className: "angleLarge" })}

onKeyPressEvent={(_, event) => {
    if (event.get_keyval()[1] === Gdk.KEY_Escape) { App.toggle_window("sessioncontrols") }
}}